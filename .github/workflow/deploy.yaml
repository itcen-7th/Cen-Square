# GitHub Actions: dev 브랜치에 push되면 실행됨
name: Deploy Spring App to EC2 via Bastion

on:
  push:
    branches: [ "dev" ]  # dev 브랜치에 push될 때 실행

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub가 제공하는 우분투 가상 머신 사용

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # GitHub repo의 코드를 받아옴

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build JAR with Gradle
      run: |
        echo "Gradle 빌드를 시작합니다..."
        ./gradlew build

    - name: Generate Dockerfile dynamically
      run: |
        echo "Dockerfile을 생성합니다..."
        echo "FROM openjdk:17-jdk-slim
        WORKDIR /app
        COPY build/libs/*.jar app.jar
        ENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]" > Dockerfile

    - name: Upload project to Bastion server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.BASTION_HOST }}
        username: ${{ secrets.BASTION_USER }}
        key: ${{ secrets.EC2_KEY }}
        source: "."
        target: "~/spring-deploy"

    - name: SSH into Bastion and deploy to Spring EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.BASTION_HOST }}
        username: ${{ secrets.BASTION_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          set -e  # 에러 발생 시 즉시 종료

          echo "Private EC2로 SSH 접속 중..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.SPRING_EC2_PRIVATE_IP }} << 'EOF'
            set -e

            echo "spring-app 디렉토리로 이동 또는 생성"
            cd ~/spring-app || mkdir -p ~/spring-app && cd ~/spring-app

            echo "기존 파일 정리"
            [ "$PWD" = "$HOME/spring-app" ] && rm -rf *

            echo " Bastion에서 프로젝트 복사"
            cp -r ~/spring-deploy/* .

            echo "기존 Docker 컨테이너 정리"
            docker stop spring-app || true
            docker rm spring-app || true

            echo "Docker 이미지 빌드 시작"
            docker build -t spring-app .

            echo " Docker 컨테이너 실행"
            docker run -d --name spring-app -p 8080:8080 spring-app

            echo "배포 완료"
          EOF
