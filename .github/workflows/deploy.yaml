# GitHub Actions: dev 브랜치에 push되면 실행됨
name: Deploy Spring App to EC2 via Bastion

on:
  push:
    branches: [ "feat/cicd" ]  # feat/cicd 브랜치에 push될 때 실행

jobs:
  deploy:
    runs-on: ubuntu-22.04  # GitHub가 제공하는 우분투 가상 머신 사용

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # GitHub repo의 코드를 받아옴

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build JAR with Gradle
        run: |
          echo "Gradle 빌드를 시작합니다."
          chmod +x ./gradlew 
          ./gradlew build -x test

      - name: Generate Dockerfile dynamically
        run: |
          echo "Dockerfile을 생성합니다."
          echo 'FROM openjdk:17-jdk-slim' > Dockerfile
          echo 'WORKDIR /app' >> Dockerfile
          echo 'COPY build/libs/*.jar app.jar' >> Dockerfile
          echo 'ENTRYPOINT ["java", "-jar", "app.jar"]' >> Dockerfile
          echo "=======Dockerfile 내용======="
          cat Dockerfile

      - name: Upload project to Bastion server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.BASTION_HOST }}
          username: ${{ secrets.BASTION_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "build/libs/*,Dockerfile" 
          target: "~/spring-deploy"

      - name: SSH into Bastion and deploy to Spring EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.BASTION_HOST }}
          username: ${{ secrets.BASTION_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e  # 에러 발생 시 즉시 종료

            echo "Private EC2로 SSH 접속 중입니다"
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/bastion.pem ubuntu@${{ secrets.SPRING_EC2_PRIVATE_IP }} << 'EOF'
              set -e
              echo "Spring EC2 접속 성공했습니다"

              echo "spring-app 디렉토리로 이동 또는 생성합니다"
              cd ~/spring-app || mkdir -p ~/spring-app && cd ~/spring-app

              echo "기존 파일 정리"
              [ "$PWD" = "$HOME/spring-app" ] && rm -rf *

              echo "Bastion에서 프로젝트 복사합니다"
              cp -a /home/ubuntu/spring-deploy/. .

              echo "기존 Docker 컨테이너 정리합니다"
              docker stop spring-app || true
              docker rm spring-app || true

              echo "Dockerfile 존재 여부 확인합니다"
              if [ -f Dockerfile ]; then
                echo "[생성]Dockerfile이 존재합니다. Docker 빌드를 시작합니다."
              else
                echo "[실패]Dockerfile이 존재하지 않습니다. 복사 경로 또는 이전 단계 확인이 필요합니다."
                ls -al
                exit 1
              fi

              echo "Docker 이미지 빌드 시작합니다"
              docker build -t spring-app .

              echo "Docker 컨테이너 실행합니다"
              docker run -d --name spring-app -p 8888:8080 spring-app

              echo "배포 완료했습니다"
            EOF
